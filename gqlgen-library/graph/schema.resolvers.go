package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	"github.com/ivan-angelov9643/go-project/library-app/models"

	"github.com/ivan-angelov9643/gqlgen-todos/graph/model"
)

// Category is the resolver for the category field.
func (r *bookResolver) Category(ctx context.Context, obj *model.Book) (*model.Category, error) {
	categoryID, err := uuid.Parse(obj.CategoryID)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID: %w", err)
	}
	category, err := r.CategoryManager.Get(categoryID)
	if err != nil {
		return nil, err
	}
	graphQLCategory := ToGraphQLCategoryModel(category)
	return &graphQLCategory, nil
}

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, title string, year int32, authorID string, categoryID string, totalCopies int32, language string) (*model.Book, error) {
	book, err := GORMBookModel(title, year, authorID, categoryID, totalCopies, language)
	if err != nil {
		return nil, err
	}
	newBook, err := r.BookManager.Create(*book)
	if err != nil {
		return nil, err
	}
	graphQLBook := ToGraphQLBookModel(newBook)
	return &graphQLBook, nil
}

// UpdateBook is the resolver for the updateBook field.
func (r *mutationResolver) UpdateBook(ctx context.Context, id string, title *string, year *int32, totalCopies *int32, language *string) (*model.Book, error) {
	bookID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid book ID: %w", err)
	}

	updatedBook := models.Book{
		BaseModel:   models.BaseModel{ID: bookID},
		Title:       DerefString(title),
		Year:        DerefInt(year),
		TotalCopies: DerefInt(totalCopies),
		Language:    DerefString(language),
	}

	book, err := r.BookManager.Update(updatedBook)
	if err != nil {
		return nil, err
	}

	graphQLBook := ToGraphQLBookModel(book)
	return &graphQLBook, nil
}

// DeleteBook is the resolver for the deleteBook field.
func (r *mutationResolver) DeleteBook(ctx context.Context, id string) (bool, error) {
	bookID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("invalid book ID: %w", err)
	}

	_, err = r.BookManager.Delete(bookID)
	return err == nil, err
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, name string, description *string) (*model.Category, error) {
	category := GORMCategoryModel(name, description)

	newCategory, err := r.CategoryManager.Create(*category)
	if err != nil {
		return nil, err
	}

	graphQLCategory := ToGraphQLCategoryModel(newCategory)
	return &graphQLCategory, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, name *string, description *string) (*model.Category, error) {
	categoryID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID: %w", err)
	}

	updatedCategory := models.Category{
		BaseModel:   models.BaseModel{ID: categoryID},
		Name:        DerefString(name),
		Description: description,
	}

	category, err := r.CategoryManager.Update(updatedCategory)
	if err != nil {
		return nil, err
	}

	graphQLCategory := ToGraphQLCategoryModel(category)
	return &graphQLCategory, nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	categoryID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("invalid category ID: %w", err)
	}

	_, err = r.CategoryManager.Delete(categoryID)
	return err == nil, err
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	books, err := r.BookManager.GetAll()
	if err != nil {
		return nil, err
	}
	var graphQLBooks []*model.Book
	for _, book := range books {
		b := ToGraphQLBookModel(book)
		graphQLBooks = append(graphQLBooks, &b)
	}
	return graphQLBooks, nil
}

// Book is the resolver for the book field.
func (r *queryResolver) Book(ctx context.Context, id string) (*model.Book, error) {
	bookID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid book ID: %w", err)
	}
	book, err := r.BookManager.Get(bookID)
	if err != nil {
		return nil, err
	}
	graphQLBook := ToGraphQLBookModel(book)
	return &graphQLBook, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryManager.GetAll()
	if err != nil {
		return nil, err
	}
	var graphQLCategories []*model.Category
	for _, category := range categories {
		c := ToGraphQLCategoryModel(category)
		graphQLCategories = append(graphQLCategories, &c)
	}
	return graphQLCategories, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	categoryID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID: %w", err)
	}
	category, err := r.CategoryManager.Get(categoryID)
	if err != nil {
		return nil, err
	}
	graphQLCategory := ToGraphQLCategoryModel(category)
	return &graphQLCategory, nil
}

// Book returns BookResolver implementation.
func (r *Resolver) Book() BookResolver { return &bookResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type bookResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
