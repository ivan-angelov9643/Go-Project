// Code generated by mockery. DO NOT EDIT.

package automock

import (
	db "awesomeProject/library-app/db"

	mock "github.com/stretchr/testify/mock"

	models "awesomeProject/library-app/models"

	uuid "github.com/google/uuid"
)

// AuthorManagerInterface is an autogenerated mock type for the AuthorManagerInterface type
type AuthorManagerInterface struct {
	mock.Mock
}

type AuthorManagerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthorManagerInterface) EXPECT() *AuthorManagerInterface_Expecter {
	return &AuthorManagerInterface_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) Count(_a0 ...db.DBScope) (int64, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...db.DBScope) (int64, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...db.DBScope) int64); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(...db.DBScope) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type AuthorManagerInterface_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - _a0 ...db.DBScope
func (_e *AuthorManagerInterface_Expecter) Count(_a0 ...interface{}) *AuthorManagerInterface_Count_Call {
	return &AuthorManagerInterface_Count_Call{Call: _e.mock.On("Count",
		append([]interface{}{}, _a0...)...)}
}

func (_c *AuthorManagerInterface_Count_Call) Run(run func(_a0 ...db.DBScope)) *AuthorManagerInterface_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]db.DBScope, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(db.DBScope)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *AuthorManagerInterface_Count_Call) Return(_a0 int64, _a1 error) *AuthorManagerInterface_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_Count_Call) RunAndReturn(run func(...db.DBScope) (int64, error)) *AuthorManagerInterface_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) Create(_a0 models.Author) (models.Author, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Author) (models.Author, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Author) models.Author); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Author)
	}

	if rf, ok := ret.Get(1).(func(models.Author) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AuthorManagerInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 models.Author
func (_e *AuthorManagerInterface_Expecter) Create(_a0 interface{}) *AuthorManagerInterface_Create_Call {
	return &AuthorManagerInterface_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *AuthorManagerInterface_Create_Call) Run(run func(_a0 models.Author)) *AuthorManagerInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Author))
	})
	return _c
}

func (_c *AuthorManagerInterface_Create_Call) Return(_a0 models.Author, _a1 error) *AuthorManagerInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_Create_Call) RunAndReturn(run func(models.Author) (models.Author, error)) *AuthorManagerInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) Delete(_a0 uuid.UUID) (models.Author, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Author, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Author); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Author)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AuthorManagerInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *AuthorManagerInterface_Expecter) Delete(_a0 interface{}) *AuthorManagerInterface_Delete_Call {
	return &AuthorManagerInterface_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *AuthorManagerInterface_Delete_Call) Run(run func(_a0 uuid.UUID)) *AuthorManagerInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AuthorManagerInterface_Delete_Call) Return(_a0 models.Author, _a1 error) *AuthorManagerInterface_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_Delete_Call) RunAndReturn(run func(uuid.UUID) (models.Author, error)) *AuthorManagerInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) Get(_a0 uuid.UUID) (models.Author, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (models.Author, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) models.Author); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Author)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AuthorManagerInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *AuthorManagerInterface_Expecter) Get(_a0 interface{}) *AuthorManagerInterface_Get_Call {
	return &AuthorManagerInterface_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *AuthorManagerInterface_Get_Call) Run(run func(_a0 uuid.UUID)) *AuthorManagerInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *AuthorManagerInterface_Get_Call) Return(_a0 models.Author, _a1 error) *AuthorManagerInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_Get_Call) RunAndReturn(run func(uuid.UUID) (models.Author, error)) *AuthorManagerInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) GetAll(_a0 ...db.DBScope) ([]models.Author, error) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(...db.DBScope) ([]models.Author, error)); ok {
		return rf(_a0...)
	}
	if rf, ok := ret.Get(0).(func(...db.DBScope) []models.Author); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(...db.DBScope) error); ok {
		r1 = rf(_a0...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type AuthorManagerInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - _a0 ...db.DBScope
func (_e *AuthorManagerInterface_Expecter) GetAll(_a0 ...interface{}) *AuthorManagerInterface_GetAll_Call {
	return &AuthorManagerInterface_GetAll_Call{Call: _e.mock.On("GetAll",
		append([]interface{}{}, _a0...)...)}
}

func (_c *AuthorManagerInterface_GetAll_Call) Run(run func(_a0 ...db.DBScope)) *AuthorManagerInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]db.DBScope, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(db.DBScope)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *AuthorManagerInterface_GetAll_Call) Return(_a0 []models.Author, _a1 error) *AuthorManagerInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_GetAll_Call) RunAndReturn(run func(...db.DBScope) ([]models.Author, error)) *AuthorManagerInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *AuthorManagerInterface) Update(_a0 models.Author) (models.Author, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Author) (models.Author, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Author) models.Author); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Author)
	}

	if rf, ok := ret.Get(1).(func(models.Author) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorManagerInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AuthorManagerInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 models.Author
func (_e *AuthorManagerInterface_Expecter) Update(_a0 interface{}) *AuthorManagerInterface_Update_Call {
	return &AuthorManagerInterface_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *AuthorManagerInterface_Update_Call) Run(run func(_a0 models.Author)) *AuthorManagerInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Author))
	})
	return _c
}

func (_c *AuthorManagerInterface_Update_Call) Return(_a0 models.Author, _a1 error) *AuthorManagerInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthorManagerInterface_Update_Call) RunAndReturn(run func(models.Author) (models.Author, error)) *AuthorManagerInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorManagerInterface creates a new instance of AuthorManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorManagerInterface {
	mock := &AuthorManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
